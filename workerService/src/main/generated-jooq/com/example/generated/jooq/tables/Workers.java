/*
 * This file is generated by jOOQ.
*/
package com.example.generated.jooq.tables;


import com.example.generated.jooq.Indexes;
import com.example.generated.jooq.Keys;
import com.example.generated.jooq.Public;
import com.example.generated.jooq.tables.records.WorkersRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Workers extends TableImpl<WorkersRecord> {

    private static final long serialVersionUID = 947929669;

    /**
     * The reference instance of <code>public.workers</code>
     */
    public static final Workers WORKERS = new Workers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkersRecord> getRecordType() {
        return WorkersRecord.class;
    }

    /**
     * The column <code>public.workers.id</code>.
     */
    public final TableField<WorkersRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.workers.name</code>.
     */
    public final TableField<WorkersRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>public.workers</code> table reference
     */
    public Workers() {
        this(DSL.name("workers"), null);
    }

    /**
     * Create an aliased <code>public.workers</code> table reference
     */
    public Workers(String alias) {
        this(DSL.name(alias), WORKERS);
    }

    /**
     * Create an aliased <code>public.workers</code> table reference
     */
    public Workers(Name alias) {
        this(alias, WORKERS);
    }

    private Workers(Name alias, Table<WorkersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Workers(Name alias, Table<WorkersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WORKERS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<WorkersRecord, Integer> getIdentity() {
        return Keys.IDENTITY_WORKERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<WorkersRecord> getPrimaryKey() {
        return Keys.KEY_WORKERS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<WorkersRecord>> getKeys() {
        return Arrays.<UniqueKey<WorkersRecord>>asList(Keys.KEY_WORKERS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Workers as(String alias) {
        return new Workers(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Workers as(Name alias) {
        return new Workers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Workers rename(String name) {
        return new Workers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Workers rename(Name name) {
        return new Workers(name, null);
    }
}
